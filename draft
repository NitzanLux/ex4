//        if (toDelete == smallestNode.getValue()) {
//            smallestNode = findSuccessor(smallestNode);
//            smallestNode.setLeftChild(null);
//            treeSize--;
//            return true;
//        }
//
//        BinaryTreeNode fatherToDelete = fatherOfElement(toDelete);
//        BinaryTreeNode nodeToDelete = getNextPath(fatherToDelete, toDelete);
//        if (nodeToDelete != null) {
//            if (nodeToDelete.getLeftChild() != null || nodeToDelete.getRightChild() != null) {
//                if (nodeToDelete.getLeftChild() == null ^ nodeToDelete.getRightChild() == null) {
//                    replaceOnlyChild(nodeToDelete, nodeToDelete.getChild());
//                } else {
//                    BinaryTreeNode replaceNode = findSuccessor(nodeToDelete);
//                    if (replaceNode == null) {
//                        return false;
//                    }
//                    replaceOnlyChild(nodeToDelete, replaceNode);
//                    replaceNode.setChild(replaceNode.getRightChild());
//                    replaceNode.setChild(replaceNode.getLeftChild());
//                }
//            } else {
//                nodeToDelete.getParent().removeChild(nodeToDelete);
//            }
//            treeSize--;
//            return true;
//        }
//        return false;




    public static void main(String[] args) {
        Random random=new Random();
        AvlTree avlTree=new AvlTree();
        int size=0;
        for (int i = 0; i <10; i++) {
            avlTree.add(i);
        }
        for (int i = 0; i <10; i++) {
            if (avlTree.contains(i)!=-1){
                size++;
            }
        }
        for (int i = 0; i <10 ; i++) {
            avlTree.delete(i);
        }
        for (int i = 0; i <1000; i++) {
            if (avlTree.contains(i)!=-1){
                size--;
            }
        }
        System.out.println("ffffff");
    }




//        BinaryTreeNode fatherToDelete= nodeToDelete.getParent();
//        BinaryTreeNode fatherToReplace=nodeToReplace.getParent();
//        if (nodeToDelete!=root){
//            fatherToDelete.setChild(nodeToReplace);
//        }else {
//            nodeToReplace.setParent(null);
//            root=nodeToReplace;
//        }
//        fatherToReplace.setLeftChild(nodeToDelete);
//        nodeToDelete.setParent(fatherToReplace);
//        BinaryTreeNode nodeToReplaceChild=nodeToReplace.getChild();
//        if (nodeToDelete.getRightChild()!=nodeToReplace){
//        nodeToReplace.setChild(nodeToDelete.getRightChild());
//        }else {
//            nodeToReplace.setRightChild(nodeToDelete);
//        }
//        nodeToReplace.setChild(nodeToDelete.getLeftChild());
//        nodeToDelete.setNullChilds();
//        if (nodeToReplaceChild!=null){
//            nodeToDelete.setChild(nodeToReplaceChild);
//        }
//        if (nodeToDelete.getChild()!=null) {
//            replaceOnlyChild(nodeToDelete, nodeToDelete.getChild());
//        }else {
//            nodeToDelete.getParent().setRightChild(null);
//        }